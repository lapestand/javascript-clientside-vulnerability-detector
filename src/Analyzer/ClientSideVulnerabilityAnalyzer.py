from requests_html import HTMLSession
from urllib.parse import urljoin, urlparse
import requests
import pyjsparser
import jsbeautifier

from src import utils

from src.Analyzer.DomBasedXssScanner import Scanner as DOMScanner
from src.Analyzer.CrossDomainInformationLeakage import Scanner as CDIScanner
from src.Analyzer.ClientSideLogicAndDataStorage import Scanner as CSLDScanner

class ClientSideVulnerabilityAnalyzer:
    def __init__(self):
        
        self.DOMScanner         = DOMScanner.StaticAnalyzer()
        self.CDISScanner        = CDIScanner.StaticAnalyzer()
        self.CSLDScanner        = CSLDScanner.StaticAnalyzer()

        self.dom_xss            = "dom_xss"
        self.inf_leakage        = "inf_leakage"
        self.logic_data         = "logic_data"

        self.session            = None
        self.response           = None

        self.url                = None

        self.vulns              = {self.dom_xss: [], self.inf_leakage: [], self.logic_data: []}

        self.scripts            = None

        self.session_updated    = False


    def create_session(self, url):
        try:
            self.url                = urlparse(url, "http").geturl()
        
            self.session            = HTMLSession()
            self.response           = self.session.get(self.url)
            
            self.session_updated    = True
            return True
        except Exception as e:
            print(e)
            return False

    def render_response_html(self):
        self.response.html.render()
    
    def get_scripts(self):
        if not self.session:
            raise Exception("Session not found!")
        
        if self.scripts is None or self.session_updated:
            self.session_updated = True
            scripts = []
            for script in self.response.html.find("script"):
                current = []
                if "src" in script.attrs:
                    current.append("linked")
                    current.append(self.decode(requests.get(urljoin(self.url, script.attrs["src"])).text))
                else:
                    current.append("inline")
                    current.append(self.decode(script.text))
                scripts.append(current)
            self.scripts = scripts
        return self.scripts

    def parse(self, js_content):
        return pyjsparser.parse(jsbeautifier.beautify(js_content))

    def get_recursively(self, search_dict, target):
        return utils.get_recursively(search_dict, target)
        
    def decode(self, target):
        return utils._decode(target)