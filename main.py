import os
import argparse
import logging
import json

from src import utils
from src.Analyzer.DomBasedXssScanner import Scanner as DOMScanner
from src.Analyzer.CrossDomainInformationLeakage import Scanner as CDIScanner
from src.Analyzer import ClientSideVulnerabilityAnalyzer

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="DOM BASED XSS SCANNER")
    parser.add_argument("--url", help="Target website url", required=True)
    parser.add_argument("-v", "--verbose", help="Increase verbosity level", action="store_true")
    args = parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.info("Verbosity ON")

    os.system("clear" if os.name == "posix" else "cls")
    dom_scanner = DOMScanner.StaticAnalyzer()
    cdis_scanner = CDIScanner.StaticAnalyzer()

    analyzer = ClientSideVulnerabilityAnalyzer.ClientSideVulnerabilityAnalyzer()
    
    # Create a new session and connect with the website
    analyzer.create_session(args.url)

    # Render javascipt code in response html
    analyzer.render_response_html()

    # Get all scripts from response html page (inline - external)
    scripts = analyzer.get_scripts()

    print("Anlayzing started")

    parsed_scripts = []
    not_parsed = []
    for script in scripts:
        try:
            parsed_script = analyzer.parse(script[1])
            analyzer.CDISScanner.scan(analyzer.response.html, parsed_script)
            # analyzer.DOMScanner.scan(parsed_script)
            # analyzer.CSLDScanner.scan(parsed_script)
        except Exception as e:
            print(e)
            not_parsed.append([script, e])

    print(f"""\n\n------------------------------------Results------------------------------------
    
                            Cross Domain Information Leakage
                        ------------------------------------------
                    Inline vulnerabilities\t->\t{len(analyzer.CDISScanner.inline_vulns)}
                    Linked vulnerabilities\t->\t{len(analyzer.CDISScanner.linked_vulns)}
            ***********************************************************************************
                                    Dom Based XSS
                        ------------------------------------------
                    Inline vulnerabilities\t->\t{len(analyzer.CDISScanner.inline_vulns)}
                    Linked vulnerabilities\t->\t{len(analyzer.CDISScanner.linked_vulns)}
            ***********************************************************************************
                            Client Side Logic and Data Storage
                        ------------------------------------------
                    Inline vulnerabilities\t->\t{len(analyzer.CDISScanner.inline_vulns)}
                    Linked vulnerabilities\t->\t{len(analyzer.CDISScanner.linked_vulns)}
            \n------------------------------------Results------------------------------------\n\n""")
    """
    for sc in parsed_scripts:
    
        print(json.dumps(sc, indent=4))
        print("\n"*3 + "**"*15)
        f.write(json.dumps(sc, indent=4))
        exit(1)
    #sdfsdfsdfasfasd
    f.close()

    # scanner = StaticAnalyzer()
    # scanner.scan(args.url)
    """



"""
google xss
http://vulnweb.com/
http://www.insecurelabs.org/Task/
public-firing-range.appspot.com

https://youtu.be/xXbDhyKo9B8?t=770

https://owasp.org/www-community/attacks/DOM_Based_XSS
http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting
https://www.cgisecurity.com/xss-faq.html
http://www.webappsec.org/projects/articles/071105.shtml#r8

https://owasp.org/projects/
https://owasp.org/www-community/
"""
